# 구현한 내용:

## 화면에 바닥을 그린다.
## 사용자에게 가로와 세로의 나누기 개수를 입력 받는다.
### 콘솔창에서 가로와 세로의 개수를 입력 받도록 한다.
### 나누기 개수는 5 ≤ 개수 ≤ 25으로 한다. (최대값 변경 가능)
## 입력 받은 개수 만큼으로 가로와 세로를 나누고 각 칸에 육면체를 그린다.
### 육면체가 나타나는 애니메이션을 구현한다. 
#### 예를 들어, 위에서 육면체가 떨어진다. 아래에서 육면체가 올라온다.
### 키보드 명령에 의해 육면체들이 다른 속도, 다른 최대/최소 높이로 움직인다.
## 화면의 한 부분에 탑뷰의 미니맵이 그려진다.

#키보드 명령

## o/p: 투영을 선택한다 (직각 투영 / 원근 투영)
### z/Z: 원근 투영 시 z축으로 이동할 수 있게 한다.
## m/M: 육면체들이 위 아래로 움직인다/멈춘다. 
### 움직이는 속도와 높이의 최대값은 다양하다. 최대/최소 높이는 본인이 정한다.
## y/Y: 카메라가 바닥의 y축을 기준으로 양/음 방향으로 회전한다.
## r: 미로를 제작한다.
### 가로와 세로를 나눈 등분에서 미로가 만들어지면 그 해당 칸의 육면체는 사라지고 미로가 생긴다.
## v: 육면체들 움직임이 멈추고 낮은 높이로 변한다.
### 미로에서 움직이는 객체 확인할 수 있다. 다시 누르면 움직임 다시 시작된다.
## f: 미로에서 객체가 나타난다.	(키 변경)
## →/←/↑/↓, w/a/s/d : 객체를 앞/뒤/좌/우 이동 (w,a,s,d 추가)
## SPACE, j: 객체 점프(SPACE 추가)
## +/-: 육면체 이동하는 속도 증가/감소
## 1/3: 카메라 시점 1인칭/3인칭 변환(3인칭 수정)
### 1인칭 시점 (객체 시점)/3인칭 시점 (객체의 3인칭 시점)
## 0: 쿼터뷰 시점(추가)
## F5: 전체화면(추가)
## c: 모든 값 초기화
## q, ESC: 프로그램 종료(ESC 추가)

# 실행 시 알아야 할 요소
해당 프로그램은 객체를 로봇으로 구현하였다.
점프를 하면서 미로를 지나갈 수 있고, 객체 시점의 1인칭, 3인칭을 구현하였다.
객체를 생성하기 전, 1인칭 혹은 3인칭으로 변경하기 전에는 키보드 이동 명령을 실행하지 않는다.

# 보너스 구현 요소
마우스를 화면 중앙에 고정시킴으로써 FPS게임의 특징인 마우스 무한이동을 구현하였다.
마우스의 모양을 변경하였다.
마우스의 회전에 따라 PassiveMotion을 작동시킴으로써 CameraTarget을 계속해서 회전시켜 주었다.
객체를 로봇으로 구현하여, 이동할 때 마다 팔과 다리를 앞뒤로 흔드는 모션을 적용하였다.
중력이 적용된 점프를 구현하였다.
로봇이 점프할 때 마다 카메라도 객체의 시점과 동일하게 Y축으로 이동한다.
미로를 지나가며, 주변의 육면체를 통과할 수 없도록 모든 미로가 아닌 육면체에 대하여 충돌처리를 구현하였다.
조명을 적용하여 모든 오브젝트의 깊이감을 구현하였다.
조명의 위치와 로봇의 회전에 따라 로봇이 빛을 받는 방향이 달라지도록 구현하였다.
마우스로 CameraTarget을 변경하면서 이동명령을 내리면, 현재 내가 보는 방향을 기준으로 객체 이동이 되도록 구현하였다.
탑뷰로 미니맵을 구현하며, 현재 객체가 보는 방향이 위쪽이 되도록 미니맵을 회전시켰다.